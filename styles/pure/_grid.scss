@import 'helpers';
@import 'mixins';

$SUPPORTED_COLUMNS: (5, 24);
$SUPPORTED_SCREEN_SIZES: (
  '': 0,
  'sm': 35.5em,
  'md': 48em,
  'lg': 64em,
  'xl': 80em,
);

@each $screen_size, $min_width in $SUPPORTED_SCREEN_SIZES {
  $classes: ();

  // (<percentage>: (class1, class2, ...) );
  $class_map: ();
  $passed_case_1: false;

  @each $total_columns in $SUPPORTED_COLUMNS {
    @for $num_of_columns from 1 through $total_columns {
      $class: compute_pure_class_name(
        $num_of_columns,
        $total_columns,
        $screen_size
      );
      $classes: append($classes, $class, comma);

      $percentage: $num_of_columns / $total_columns * 100%;
      $class_map: add_class_to_class_map($class_map, $percentage, $class);

      $gcd: find_gcd($num_of_columns, $total_columns);
      @if $gcd > 1 {
        $exp: $num_of_columns / $gcd;
        $exp2: $total_columns / $gcd;

        @if $exp == round($exp) and $exp2 == round($exp2) {
          $class: compute_pure_class_name($exp, $exp2, $screen_size);
          @if $exp2 != 1 {
            $classes: append($classes, $class, comma);
            $class_map: add_class_to_class_map($class_map, $percentage, $class);
          }

          @if $exp == 1 and $exp2 == 1 and $passed_case_1 == false {
            $passed_case_1: true;
            $class: compute_pure_class_name($exp, $exp, $screen_size);
            $classes: append($classes, $class, comma);
            $class_map: add_class_to_class_map($class_map, $percentage, $class);

            $class: compute_pure_class_name($exp, '', $screen_size);
            $classes: append($classes, $class, comma);
            $class_map: add_class_to_class_map($class_map, $percentage, $class);
          }
        }
      }
    }
  }

  // Generate pure styles
  @include pure_styles($classes, $class_map, $screen_size, $min_width);
}
